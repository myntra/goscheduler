// Code generated by MockGen. DO NOT EDIT.
// Source: ./dao/cluster_dao.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cluster_entity "github.com/myntra/goscheduler/cluster_entity"
	store "github.com/myntra/goscheduler/store"
)

// MockClusterDao is a mock of ClusterDao interface.
type MockClusterDao struct {
	ctrl     *gomock.Controller
	recorder *MockClusterDaoMockRecorder
}

// MockClusterDaoMockRecorder is the mock recorder for MockClusterDao.
type MockClusterDaoMockRecorder struct {
	mock *MockClusterDao
}

// NewMockClusterDao creates a new mock instance.
func NewMockClusterDao(ctrl *gomock.Controller) *MockClusterDao {
	mock := &MockClusterDao{ctrl: ctrl}
	mock.recorder = &MockClusterDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterDao) EXPECT() *MockClusterDaoMockRecorder {
	return m.recorder
}

// CreateConfigurations mocks base method.
func (m *MockClusterDao) CreateConfigurations(appId string, configuration store.Configuration) (store.Configuration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfigurations", appId, configuration)
	ret0, _ := ret[0].(store.Configuration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfigurations indicates an expected call of CreateConfigurations.
func (mr *MockClusterDaoMockRecorder) CreateConfigurations(appId, configuration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigurations", reflect.TypeOf((*MockClusterDao)(nil).CreateConfigurations), appId, configuration)
}

// CreateEntity mocks base method.
func (m *MockClusterDao) CreateEntity(info cluster_entity.EntityInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntity", info)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEntity indicates an expected call of CreateEntity.
func (mr *MockClusterDaoMockRecorder) CreateEntity(info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntity", reflect.TypeOf((*MockClusterDao)(nil).CreateEntity), info)
}

// DeleteConfiguration mocks base method.
func (m *MockClusterDao) DeleteConfiguration(appId string) (store.Configuration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfiguration", appId)
	ret0, _ := ret[0].(store.Configuration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfiguration indicates an expected call of DeleteConfiguration.
func (mr *MockClusterDaoMockRecorder) DeleteConfiguration(appId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfiguration", reflect.TypeOf((*MockClusterDao)(nil).DeleteConfiguration), appId)
}

// GetAllEntitiesInfo mocks base method.
func (m *MockClusterDao) GetAllEntitiesInfo() []cluster_entity.EntityInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEntitiesInfo")
	ret0, _ := ret[0].([]cluster_entity.EntityInfo)
	return ret0
}

// GetAllEntitiesInfo indicates an expected call of GetAllEntitiesInfo.
func (mr *MockClusterDaoMockRecorder) GetAllEntitiesInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEntitiesInfo", reflect.TypeOf((*MockClusterDao)(nil).GetAllEntitiesInfo))
}

// GetAllEntitiesInfoOfNode mocks base method.
func (m *MockClusterDao) GetAllEntitiesInfoOfNode(nodeName string) []cluster_entity.EntityInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEntitiesInfoOfNode", nodeName)
	ret0, _ := ret[0].([]cluster_entity.EntityInfo)
	return ret0
}

// GetAllEntitiesInfoOfNode indicates an expected call of GetAllEntitiesInfoOfNode.
func (mr *MockClusterDaoMockRecorder) GetAllEntitiesInfoOfNode(nodeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEntitiesInfoOfNode", reflect.TypeOf((*MockClusterDao)(nil).GetAllEntitiesInfoOfNode), nodeName)
}

// GetApp mocks base method.
func (m *MockClusterDao) GetApp(appName string) (store.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApp", appName)
	ret0, _ := ret[0].(store.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApp indicates an expected call of GetApp.
func (mr *MockClusterDaoMockRecorder) GetApp(appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApp", reflect.TypeOf((*MockClusterDao)(nil).GetApp), appName)
}

// GetApps mocks base method.
func (m *MockClusterDao) GetApps(appId string) ([]store.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApps", appId)
	ret0, _ := ret[0].([]store.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApps indicates an expected call of GetApps.
func (mr *MockClusterDaoMockRecorder) GetApps(appId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApps", reflect.TypeOf((*MockClusterDao)(nil).GetApps), appId)
}

// GetConfiguration mocks base method.
func (m *MockClusterDao) GetConfiguration(appId string) (store.Configuration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfiguration", appId)
	ret0, _ := ret[0].(store.Configuration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfiguration indicates an expected call of GetConfiguration.
func (mr *MockClusterDaoMockRecorder) GetConfiguration(appId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguration", reflect.TypeOf((*MockClusterDao)(nil).GetConfiguration), appId)
}

// GetDCAwareApp mocks base method.
func (m *MockClusterDao) GetDCAwareApp(appName string) (store.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDCAwareApp", appName)
	ret0, _ := ret[0].(store.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDCAwareApp indicates an expected call of GetDCAwareApp.
func (mr *MockClusterDaoMockRecorder) GetDCAwareApp(appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDCAwareApp", reflect.TypeOf((*MockClusterDao)(nil).GetDCAwareApp), appName)
}

// GetEntityInfo mocks base method.
func (m *MockClusterDao) GetEntityInfo(id string) cluster_entity.EntityInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityInfo", id)
	ret0, _ := ret[0].(cluster_entity.EntityInfo)
	return ret0
}

// GetEntityInfo indicates an expected call of GetEntityInfo.
func (mr *MockClusterDaoMockRecorder) GetEntityInfo(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityInfo", reflect.TypeOf((*MockClusterDao)(nil).GetEntityInfo), id)
}

// InsertApp mocks base method.
func (m *MockClusterDao) InsertApp(app store.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertApp", app)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertApp indicates an expected call of InsertApp.
func (mr *MockClusterDaoMockRecorder) InsertApp(app interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertApp", reflect.TypeOf((*MockClusterDao)(nil).InsertApp), app)
}

// InvalidateSingleAppCache mocks base method.
func (m *MockClusterDao) InvalidateSingleAppCache(appName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InvalidateSingleAppCache", appName)
}

// InvalidateSingleAppCache indicates an expected call of InvalidateSingleAppCache.
func (mr *MockClusterDaoMockRecorder) InvalidateSingleAppCache(appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateSingleAppCache", reflect.TypeOf((*MockClusterDao)(nil).InvalidateSingleAppCache), appName)
}

// UpdateAppActiveStatus mocks base method.
func (m *MockClusterDao) UpdateAppActiveStatus(appName string, activeStatus bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAppActiveStatus", appName, activeStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAppActiveStatus indicates an expected call of UpdateAppActiveStatus.
func (mr *MockClusterDaoMockRecorder) UpdateAppActiveStatus(appName, activeStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppActiveStatus", reflect.TypeOf((*MockClusterDao)(nil).UpdateAppActiveStatus), appName, activeStatus)
}

// UpdateConfiguration mocks base method.
func (m *MockClusterDao) UpdateConfiguration(appId string, configuration store.Configuration) (store.Configuration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfiguration", appId, configuration)
	ret0, _ := ret[0].(store.Configuration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfiguration indicates an expected call of UpdateConfiguration.
func (mr *MockClusterDaoMockRecorder) UpdateConfiguration(appId, configuration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfiguration", reflect.TypeOf((*MockClusterDao)(nil).UpdateConfiguration), appId, configuration)
}

// UpdateEntityStatus mocks base method.
func (m *MockClusterDao) UpdateEntityStatus(id, nodeName string, status int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEntityStatus", id, nodeName, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEntityStatus indicates an expected call of UpdateEntityStatus.
func (mr *MockClusterDaoMockRecorder) UpdateEntityStatus(id, nodeName, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntityStatus", reflect.TypeOf((*MockClusterDao)(nil).UpdateEntityStatus), id, nodeName, status)
}
